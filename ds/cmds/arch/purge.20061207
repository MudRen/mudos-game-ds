// purge.c

#include <ansi.h>
#define SYNTAX  "指令格式﹕purge [<未上線天數>] | <使用者姓名> because <原因>\n"

inherit F_CLEAN_UP;

private int do_purge_players(int day);
private int do_purge_error();
private int do_purge_chars(int day);

int main(object me, string arg)
{
        string name, reason;
        string status;
        int day;
        mixed info;
        status = wizhood(me);
        if( me!=this_player(1) || wiz_level(me) < wiz_level(status) )
                return notify_fail("你沒有權力使用這個指令。\n");

        if( !arg ) return notify_fail(SYNTAX);

        if( arg == "<verify>") 
        {
                return do_purge_error();
        }
        if( sscanf(arg, "%d", day) && day >= 0) return do_purge_players(day);
        else if( sscanf(arg, "<%d>", day) && day >= 0) return do_purge_chars(day);
        if( sscanf(arg, "%s because %s", name, reason)!=2 ) return notify_fail(SYNTAX);

//      seteuid(getuid());
        seteuid(ROOT_UID); // 試以此方法, 不知道會不會有漏洞

        if( file_size(DATA_DIR + "login/" + name[0..0] + "/" + name + __SAVE_EXTENSION__)<0 )
                return notify_fail("沒有這位使用者。\n");
        if( (string)SECURITY_D->get_status(name)!="(player)" )
        {
          if( wiz_level((string)SECURITY_D->get_status(name)) >= wiz_level(me) ) return notify_fail("你沒有刪除對方檔案的權力。\n");
          else if(SECURITY_D->set_status(name,me,"(player)")) write(name+"已撤銷巫師資格.\n");
               else write("注意!! 無法撤銷"+name+"的巫師資格, 檔案消除後請立刻手動消除wizlist.\n");
        }

//------start added by cominging
        assure_file(DATA_DIR + "backup/" + name[0..0] + "/"+ name + "_login" + __SAVE_EXTENSION__);
        if( !rename(DATA_DIR + "login/" + name[0..0] + "/" + name + __SAVE_EXTENSION__,
                DATA_DIR + "backup/" + name[0..0] + "/"+ name + "_login" + __SAVE_EXTENSION__)
        && !rename(DATA_DIR + "user/" + name[0..0] + "/" + name + __SAVE_EXTENSION__,
                DATA_DIR + "backup/" + name[0..0] + "/"+ name + "_user" + __SAVE_EXTENSION__) )
                write(" 使用者檔案備份成功\！ \n");
        else write("使用者備份失敗, 可能是 login 或 user 檔損壞。\n");
//------end

//      用 rename 以下可不用            
//      rm(DATA_DIR + "login/" + name[0..0] + "/" + name + __SAVE_EXTENSION__);
//      rm(DATA_DIR + "user/" + name[0..0] + "/" + name + __SAVE_EXTENSION__);
        rm(DATA_DIR + "mail/" + name[0..0] + "/" + name + __SAVE_EXTENSION__);
        rm(DATA_DIR + "note/" + name[0..0] + "/" + name + __SAVE_EXTENSION__);
        rm(DATA_DIR + "signature/" + name[0..0] + "/" + name + __SAVE_EXTENSION__);
        RECORD_D->remove_record(name);
        CLUB_D->clean_player(name);

        write( "使用者 " + capitalize(name) + " 刪除掉了。\n");
        log_file("static/PURGE", sprintf("[%s] %s purged %s because %s.\n",
                ctime(time())[0..15], geteuid(this_player(1)), name, reason));

        return 1;
}

private int do_purge_players(int day)
{
        int i, j, ppl_cnt, count;
        string *dir, *ppls, name;
        mixed info;

        seteuid(getuid());
        message("system", "\n*** 整理玩家登入檔中﹐請稍候.... ***\n", users());
        write("處理中﹕");
        count = 0;
        ppl_cnt = 0;
        dir = get_dir(DATA_DIR + "login/");
        for(i=0; i<sizeof(dir); i++) {
                reset_eval_cost();
                write(dir[i]);
                ppls = get_dir(DATA_DIR + "login/" + dir[i] + "/");
                ppl_cnt += sizeof(ppls);
                for(j=0; j<sizeof(ppls); j++)
                {
                        if( sscanf(ppls[j], "%s.o", name)==1 )
                        {
                                if( (string)SECURITY_D->get_status(name)!="(player)" )
                                        continue;
                        } else continue;
                        info = stat(DATA_DIR + "login/" + dir[i] + "/" + ppls[j]);
                        if( (time()-(int)info[1])/86400 >= day )
                        {
//------start added by cominging
      assure_file(DATA_DIR + "backup/" + dir[i] + "/"+ ppls[j] + "_login" + __SAVE_EXTENSION__);
      if( !rename(DATA_DIR + "login/" + dir[i] + "/" + ppls[j] + __SAVE_EXTENSION__,
                 DATA_DIR + "backup/" + dir[i] + "/"+ ppls[j] + "_login" + __SAVE_EXTENSION__)
        && !rename(DATA_DIR + "user/" + dir[i] + "/" + ppls[j] + __SAVE_EXTENSION__,
                  DATA_DIR + "backup/" + dir[i] + "/"+ ppls[j] + "_user" + __SAVE_EXTENSION__) )
        write(" 使用者 "+ ppls[j] +"檔案備份成功\！ \n");
      else write("使用者 "+ ppls[j] +"備份失敗, 可能是 login 或 user 檔損壞。\n");
//------end
//                              rm(DATA_DIR + "login/" + dir[i] + "/" + ppls[j]);
//                              rm(DATA_DIR + "user/" + dir[i] + "/" + ppls[j]);
                                rm(DATA_DIR + "mail/" + dir[i] + "/" + ppls[j]);
                                rm(DATA_DIR + "note/" + dir[i] + "/" + ppls[j]);
                                rm(DATA_DIR + "signature/" + dir[i] + "/" + ppls[j]);
                                RECORD_D->remove_record(name);
                                CLUB_D->clean_player(name);
                                count ++;
                        }
                }
        }
        write("\n\n原來總共有 " + ppl_cnt + " 位使用者。\n");
        write( count + " 個超過 " + day + " 天未上線的使用者被清除掉了。\n");
        write("現在總共有 " + (ppl_cnt - count) + " 位使用者。\n");
        log_file("static/PURGE", sprintf("[%s] %s cleaned up %d characters who didn't login for more than %d days\n"
                "\t\tResulting statistics: %d characters remaining.\n",
                ctime(time())[0..15], geteuid(this_player(1)), count, day, ppl_cnt - count));


        return 1;
}

private int do_purge_chars(int day)
{
        int i, j, ppl_cnt, count;
        string *dir, *ppls, name;
        mixed info;

        seteuid(getuid());
        message("system", "\n*** 整理玩家資料檔中﹐請稍候.... ***\n", users());
        write("處理中﹕");
        count = 0;
        ppl_cnt = 0;
        dir = get_dir(DATA_DIR + "user/");
        for(i=0; i<sizeof(dir); i++) {
                reset_eval_cost();
                write(dir[i]);
                ppls = get_dir(DATA_DIR + "user/" + dir[i] + "/");
                ppl_cnt += sizeof(ppls);
                for(j=0; j<sizeof(ppls); j++)
                {
                        if( sscanf(ppls[j], "%s.o", name)==1 )
                        {
                                if( (string)SECURITY_D->get_status(name)!="(player)" )
                                        continue;
                        } else continue;
                        info = stat(DATA_DIR + "user/" + dir[i] + "/" + ppls[j]);
                        if( (time()-(int)info[1])/86400 >= day )
                        {
//------start added by cominging
      assure_file(DATA_DIR + "backup/" + dir[i] + "/"+ ppls[j] + "_login" + __SAVE_EXTENSION__);
      if( !rename(DATA_DIR + "login/" + dir[i] + "/" + ppls[j] + __SAVE_EXTENSION__,
                 DATA_DIR + "backup/" + dir[i] + "/"+ ppls[j] + "_login" + __SAVE_EXTENSION__)
        && !rename(DATA_DIR + "user/" + dir[i] + "/" + ppls[j] + __SAVE_EXTENSION__,
                  DATA_DIR + "backup/" + dir[i] + "/"+ ppls[j] + "_user" + __SAVE_EXTENSION__) )
        write(" 使用者 "+ ppls[j] +"檔案備份成功\！ \n");
      else write("使用者 "+ ppls[j] +"備份失敗, 可能是 login 或 user 檔損壞。\n");
//------end
//                              rm(DATA_DIR + "login/" + dir[i] + "/" + ppls[j]);
//                              rm(DATA_DIR + "user/" + dir[i] + "/" + ppls[j]);
                                rm(DATA_DIR + "mail/" + dir[i] + "/" + ppls[j]);
                                rm(DATA_DIR + "note/" + dir[i] + "/" + ppls[j]);
                                rm(DATA_DIR + "signature/" + dir[i] + "/" + ppls[j]);
                                RECORD_D->remove_record(name);
                                CLUB_D->clean_player(name);
                                count ++;
                        }
                }
        }
        write("\n\n原來總共有 " + ppl_cnt + " 位使用者資料檔。\n");
        write( count + " 個超過 " + day + " 天未上線的使用者資料檔被清除掉了。\n");
        write("現在總共有 " + (ppl_cnt - count) + " 位使用者資料檔。\n");
        log_file("static/PURGE", sprintf("[%s] %s cleaned up %d characters data who didn't restore for more than %d days\n"
                "\t\tResulting statistics: %d characters remaining.\n",
                ctime(time())[0..15], geteuid(this_player(1)), count, day, ppl_cnt - count));

        return 1;
}
private int do_purge_error()
{
        int i, j, ppl_cnt, count;
        string *dir, *ppls, name;
        mixed info;

        seteuid(getuid());
        message("system", "\n*** 核對玩家儲存檔中﹐請稍候.... ***\n", users());
        write("處理中﹕");
        count = 0;
        ppl_cnt = 0;
        dir = get_dir(DATA_DIR + "login/");
        for(i=0; i<sizeof(dir); i++)
        {
                reset_eval_cost();
                write(dir[i]);
                ppls = get_dir(DATA_DIR + "login/" + dir[i] + "/");
                ppl_cnt += sizeof(ppls);
                for(j=0; j<sizeof(ppls); j++)
                {
                        if( sscanf(ppls[j], "%s.o", name)==1 )
                        {
                                if( (string)SECURITY_D->get_status(name)!="(player)" )
                                        continue;
                        }
                        info = stat(DATA_DIR + "login/" + dir[i] + "/" + ppls[j]);
                        if(file_size(DATA_DIR + "user/" + dir[i] + "/" + ppls[j])<1)
                        {
                                rm(DATA_DIR + "login/" + dir[i] + "/" + ppls[j]);
                //              rm(DATA_DIR + "user/" + dir[i] + "/" + ppls[j]);
                                rm(DATA_DIR + "mail/" + dir[i] + "/" + ppls[j]);
                                rm(DATA_DIR + "note/" + dir[i] + "/" + ppls[j]);
                                rm(DATA_DIR + "signature/" + dir[i] + "/" + ppls[j]);
                                count ++;
                //            write(ppls[j]+"\n");
                        }
                }
        }
        message("system","\n\n原來總共有 " + ppl_cnt + " 位使用者。\n", users());
        message("system", count + " 個無資料的使用者被清除掉了。\n", users());
        message("system","現在總共有 " + (ppl_cnt - count) + " 位使用者。\n", users());
        log_file("static/PURGE", sprintf("[%s] %s cleaned up %d login_ob who didn't have char data.\n"
                "\t\tResulting statistics: %d characters remaining.\n",
                ctime(time())[0..15], geteuid(this_player(1)), count, ppl_cnt - count));


        return 1;
}

int help(object me)
{
write(@HELP
指令格式﹕purge [<未上線天數>] | <使用者姓名> because <原因>
        
        ( purge <verify> 清除光有login記錄卻無char data的login檔 )

清除一個使用者或清除超過一定天數不曾上線地使用者。
HELP
        );
    return 1;
}
