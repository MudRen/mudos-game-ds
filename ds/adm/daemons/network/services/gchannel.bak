/*
 * This protocol is used to broadcast a channel to a group of other muds.
 */

// by Annihilator (06/15/95)

#include <net/macros.h>
#include <net/dns.h>
#include <net/daemons.h>
#include <net/services.h>
#include <net/gchannel.h>
#include <mudlib.h>
inherit F_CLEAN_UP;
inherit F_DBASE;

static int debug=0,bomb=0;
string *gb_mud_list=GB_MUD_IP;
void create() { seteuid(ROOT_UID); }

void message_bomb()
{
	string *names;
	int i;
	mapping muds;
	mapping svcs;
	mapping minfo;

//	if( !this_player()		// Prevent from being called by ourself.
//	||	!ACCESS_CHECK(previous_object())) return;

	muds = (mapping)DNS_MASTER->query_muds();
	svcs = (mapping)DNS_MASTER->query_svc();
	// use keys(svcs) because none of the muds not in svcs can possibley
	// receive the message
	names = keys(svcs);
	i = sizeof(names);
	while(i--)
		if( (names[i] != mud_nname())
		&& muds[names[i]]["MUDLIB"]=="Eastern Stories")
	{
			minfo = muds[names[i]];
			if(!mapp(minfo) || !mapp(svcs[names[i]])
			|| !(svcs[names[i]]["gwizmsg"] & SVC_UDP))
				continue;

			DNS_MASTER->send_udp(
				minfo["HOSTADDRESS"],
				minfo["PORTUDP"],
				"@@@" + DNS_GCHANNEL +
				"||NAME:" + Mud_name() +
				"||MUDNAME:" + MUD_FULL_NAME +
				"||PORTUDP:" + udp_port() +
				"||USRNAME:" + "peace" +
				"||CNAME:" + "©M¥­" +
				"||MSG:" + "[2J ¤j®a§NÀR¤U¨Ó§a,§Ö¼Öªºª±MUD³á!! (tune es) Just Play MORE!!\n" +
				"||CHANNEL:" + "es" +
				"||ENCODING:" + CHARACTER_SET +
				"||LOCATION:" + MUD_LOCATION +
				"||MUDGROUP:" + MUD_GROUP +
				"@@@\n");
		}
	if(bomb) call_out("message_bomb",0);
	return;
}

int set_bomb(int flag)
{
	bomb=flag;
}

varargs void start_debug(int flag)
{
	if(flag)
	{
		debug=flag;
		write("Gchannel Debug:"+debug+" !!\n");
	}
	else{
	 debug=1;
	 write("Gchannel Debug start!!\n");
	}
	return;
}

string *query_gb_list()
{
	return gb_mud_list;
}

void stop_debug()
{
	debug=0;
	write("Gchannel Debug stop!!\n");
	return;
}

// This is the interface to the intermud channels
void send_msg(string channel, string id, string name, string msg, int emoted,mixed filter)
{
	string *names;
	int i;
	mapping muds;
	mapping svcs;
	mapping minfo;

//	if( !this_player()		// Prevent from being called by ourself.
//	||	!ACCESS_CHECK(previous_object())) return;
	if( !ACCESS_CHECK(previous_object()))
	{
		log_file("gchannel_log",sprintf("[%s] %O fail to ACCESS_CHECK\n",ctime(time()),previous_object()));
		return;
	}
	if(debug)
	{
		set("channel_id", "ºô¸ôÀW¹DºëÆF");
		CHANNEL_D->do_channel(this_object(), "sys", "prepare to send gchannel message.");
	}
	muds = (mapping)DNS_MASTER->query_muds();
	svcs = (mapping)DNS_MASTER->query_svc();
	msg = replace_string(msg, "||", "");
	msg = replace_string(msg, "@@@", "");
	msg = replace_string(msg, "$BEEP$", "");
	msg = replace_string(msg, "$CLS$", "[2J");
	// use keys(svcs) because none of the muds not in svcs can possibley
	// receive the message
	names = keys(svcs);
	i = sizeof(names);
	while(i--)
		if( (names[i] != mud_nname())
		&&	evaluate(filter, muds[names[i]])) {
			minfo = muds[names[i]];
			if(!mapp(minfo) || !mapp(svcs[names[i]])
			|| !(svcs[names[i]]["gwizmsg"] & SVC_UDP))
				continue;
	if(debug)
	{
		set("channel_id", "ºô¸ôÀW¹DºëÆF");
		if(debug==2) CHANNEL_D->do_channel(this_object(), "sys",
		sprintf("gchannel message sent to %s.", minfo["NAME"]));
	}

			
//		out_msg = msg;
		DNS_MASTER->send_udp(
				minfo["HOSTADDRESS"],
				minfo["PORTUDP"],
				"@@@" + DNS_GCHANNEL +
				"||NAME:" + Mud_name() +
				"||MUDNAME:" + MUD_FULL_NAME +
				"||PORTUDP:" + udp_port() +
				"||USRNAME:" + capitalize(id) +
				"||CNAME:" + name +
				"||MSG:" + msg +
				"||CHANNEL:" + channel +
				"||ENCODING:" + CHARACTER_SET +
				"||LOCATION:" + MUD_LOCATION +
				"||MUDGROUP:" + MUD_GROUP +
				(emoted?"||EMOTE:1":"") + "@@@\n");
		}
}

void incoming_request(mapping info)
{
	mapping minfo;
	string tmsg,*key,text="";
	int loop,emote;
	
	if(!ACCESS_CHECK(previous_object())) return;
	
	if(debug)
	{
		key=keys(info);
		for(loop=0; loop<sizeof(key); loop++)
		{
       			if(strlen(key[loop]) > 7)  text += key[loop] + "\t: ";
       			else text += key[loop] + "\t\t: ";
		        text +=sprintf("%O [0m\n",info[ key[loop] ]);
     		}
    		text+="============================\n";
		log_file("gchannel_info",text);
	}
	if(undefinedp(info["EMOTE"])) info["EMOTE"]=0;
	if (info["NAME"]) {
		if (info["NAME"] == Mud_name()) {
		log_file("gchannel_log",sprintf("[%s] %s == Mud_name() \n",ctime(time()),info["NAME"]));	
			return ;
		}
		minfo = DNS_MASTER->query_mud_info(info["NAME"]);
		if (!minfo || !strlen(info["USRNAME"])
		|| !DNS_MASTER->dns_mudp(info["NAME"]))	{
			// We don't accept the message.  But ping them anyway.
			PING_Q->send_ping_q(info["HOSTADDRESS"], info["PORTUDP"]);
			log_file("gchannel_log",sprintf("[%s] try to ping %s \n",ctime(time()),info["HOSTADDRESS"]));
			return ;
		}
		if (info["HOSTADDRESS"] != minfo["HOSTADDRESS"]) {
			if (info["EMOTE"])
				tmsg = info["USRNAME"]+"@"+info["NAME"]+" "+info["MSG"];
			else
				tmsg = info["USRNAME"]+"@"+info["NAME"]+": "+info["MSG"];

			// Faked.  sheeze... 
			dns_log("dns_fake",sprintf( "Gchannel: %s %s\n%s", ctime(time()),
				info["HOSTADDRESS"],tmsg));
			DNS_MASTER->send_udp(info["HOSTADDRESS"], info["PORTUDP"],
				"@@@"+DNS_WARNING+
				"||NAME:"+Mud_name()+
				"||MSG: Fake gchannel msg: "+tmsg+
				"||FAKEHOST:"+info["HOSTADDRESS"]+
				"@@@\n");
			log_file("gchannel_log",sprintf("[%s] %s is fake \n",ctime(time()),info["HOSTADDRESS"]));	
			return;
		}
		if( undefinedp(info["CNAME"]) )
			set("channel_id", sprintf("%s@%s", info["USRNAME"], info["NAME"]));
		else
			set("channel_id", sprintf("%s(%s@%s)", info["CNAME"], info["USRNAME"], info["NAME"]));

			if(undefinedp(info["CHANNEL"]))
			{
				if(debug) info["CHANNEL"]="ds";
				else return;
			}
			else 
			if(CHANNEL_D->undefined_channel(info["CHANNEL"]))
			{
				if(debug) info["CHANNEL"]="ds";
				else return;
			}
		//§PÂ_¤º½X¨ÃÂà´«¤º½X
		if( (!undefinedp(minfo["ENCODING"]) && lower_case(minfo["ENCODING"])=="gb")
		   || (!undefinedp(info["ENCODING"]) && info["ENCODING"]=="GB")
		   || member_array(info["HOSTADDRESS"],gb_mud_list)!=-1
		) {
			info["MSG"]=LANGUAGE_D->toBig5(info["MSG"])+"[GB½X]";
			set("channel_id",LANGUAGE_D->toBig5(query("channel_id")));
		}
			info["MSG"] = replace_string(info["MSG"],"[2J","");
		CHANNEL_D->do_channel(this_object(), lower_case(info["CHANNEL"]), info["MSG"], info["EMOTE"]);

    } //if (info["NAME"])
}

