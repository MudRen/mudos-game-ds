// ·¥¥úµ²¬É¤§³N -Luky-
// 

#define WALLNAME "·¥¥úµ²¬É"

#include <ansi.h>
#include <obj.h>
inherit SKILL;

int cast(object me, object target,string dir)
{
	int delay,sk;
	if( !target ) return notify_fail("§A¥²¶·«ü©w¤@­Ó¤è¦V¤~¯à¬I®i¦¹µ²¬É³N¡C\n");

	if( !target->is_room())
		return notify_fail("¦¹ªk³N¥u¯à¥Î©ó©Ð¶¡¡C\n");
	if( living (target) )
     		return notify_fail("¦¹ªk³N¤£¯à¥Î©ó¥Íª«¤W¡I\n");
	if( environment(me)->query("no_magic") )
     		return notify_fail("³o­Ó¦a¤è¤£¥i¥H¬Iªk¡I\n");
	if( environment(me)->query_temp("wall/"+dir))
		return notify_fail("³o­Ó¤è¦V¤w¸g¦³µ²¬É¤F¡I\n");
	if((int)me->query("mp") < 50 )
		return notify_fail("§Aªºªk¤O¤£°÷¡T\n");

	 if( me->is_busy() )
	    return notify_fail("§A¤W¤@­Ó°Ê§@ÁÙ¨S§¹¦¨¡C\n");
	sk=me->query_spell("lightwall");
	if(sk>70) delay=2+random(3);
	else if(sk>35) delay=3+random(3);
	else delay=4+random(3);
	me->add("mp", -50);
	me->start_busy(delay);
	message_vision("\n[1;35m$N­±¦V"+to_chinese(dir)+"°ªÁ|Âù¤â... ¶}©l¬I®i·¥¥ú¤§³N...[0m\n\n",me);
	call_out("do_wall",delay,me,target,dir);
	return 1;
}

int do_wall(object me, object target,string dir)
{
  object env,wall1,wall2;
  string msg,other_dir,*exit,*dirs,file;
  mapping exits;
  int i,time,sk;
  
  if(!me) return 0;
  if(!env = environment(me) ) return 1;
  if( env->query("no_magic") )
  {
     	tell_object(me,"³o­Ó¦a¤è¤£¥i¥H¬Iªk¡I\n");
     	return 1;
  }
  if( env->query_temp("wall/"+dir))
  {
	tell_object(me,"³o­Ó¤è¦V¤w¸g¦³µ²¬É¤F¡I\n");
	message_vision("$Nªº·¥¥úµ²¬É³N¬I®i«Å§i¥¢±Ñ¡C\n",me);
	return 1;
  }
  sk=me->query_spell("lightwall");
	if( random(30+sk/2+me->query_int()) < 30 || random(10)==1)
	{
		message_vision("$Nªº·¥¥úµ²¬É³N¬I®i¥¢±Ñ¤F¡C\n",me);
		me->improve_spell("lightwall",1+random(me->query_int()/4));
		return 1;
	}
	time = sk*2+me->query_int()*5;
	if(time>300) time=300;
	wall1 = new(WALL_LIGHT);
	wall1->set("level",random(sk/2));
	wall1->move(env);
	wall1->set("dir",dir);
	call_out("break_wall",time,wall1);
	env->set_temp("wall/"+dir,wall1);
	tell_room(env,"¬ðµM¶¡¤@°}±j¥ú, §A¬Ý¨ì¤­¹D·¥¥ú«Ê¦í¤F"+to_chinese(dir)+"ªº¥X¤f¡I\n");
	exits = target->query("exits");
	if(mapp(exits))
	{
	 file = base_name(env);
	 dirs = keys(exits);
	 exit = values(exits);
	 for(i=0;i<sizeof(exit);i++)
	 {
	  if(exit[i]==file)
	  {
	   wall2 = new(WALL_LIGHT);
	   wall2->set("level",random(sk/2));
	   wall2->move(target);
	   wall2->set("dir",dirs[i]);
	   call_out("break_wall",time,wall2);
	   target->set_temp("wall/"+dirs[i],wall2);
	   tell_room(target,"¬ðµM¶¡¤@°}±j¥ú, §A¬Ý¨ì¤­¹D·¥¥ú«Ê¦í¤F"+to_chinese(dirs[i])+"ªº¥X¤f¡I\n");
	  }
	 }
	}
	wall1->set("link_wall",wall2);
	wall2->set("link_wall",wall1);
	me->improve_spell("lightwall",1+random(me->query_int()/4));
	return 1;
}

int break_wall(object wall)
{
	if(!wall) return 0;
	if(environment(wall))
	{
	 tell_room(environment(wall),"·¥¥úµ²¬É¶}©lÅÜ±o³z©ú¦Ó³vº¥®ø¥¢¤F¡I\n");
	 environment(wall)->delete_temp("wall/"+wall->query("dir"));
	 destruct(wall);
	}
	return 1;
}